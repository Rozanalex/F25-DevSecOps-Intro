=== SAST Analysis Report ===
Semgrep results: 25

Top findings (rule_id : severity : file:line)
javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection : ERROR : /src/data/static/codefixes/dbSchemaChallenge_1.ts:5 — Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.
javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection : ERROR : /src/data/static/codefixes/dbSchemaChallenge_3.ts:11 — Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.
javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection : ERROR : /src/data/static/codefixes/unionSqlInjectionChallenge_1.ts:6 — Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.
javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection : ERROR : /src/data/static/codefixes/unionSqlInjectionChallenge_3.ts:10 — Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.
generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var : WARNING : /src/frontend/src/app/navbar/navbar.component.html:17 — Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: "{{ expr }}".
generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var : WARNING : /src/frontend/src/app/purchase-basket/purchase-basket.component.html:15 — Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: "{{ expr }}".
generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var : WARNING : /src/frontend/src/app/search-result/search-result.component.html:40 — Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: "{{ expr }}".
javascript.jsonwebtoken.security.jwt-hardcode.hardcoded-jwt-secret : WARNING : /src/lib/insecurity.ts:56 — A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).
javascript.express.security.injection.raw-html-format.raw-html-format : WARNING : /src/routes/chatbot.ts:197 — User data flows into the host portion of this manually-constructed HTML. This can introduce a Cross-Site-Scripting (XSS) vulnerability if this comes from user-provided input. Consider using a sanitization library such as DOMPurify to sanitize the HTML within.
javascript.express.security.audit.express-res-sendfile.express-res-sendfile : WARNING : /src/routes/fileServer.ts:33 — The application processes user-input, this is passed to res.sendFile which can allow an attacker to arbitrarily read files on the system through path traversal. It is recommended to perform input validation in addition to canonicalizing the path. This allows you to validate the path against the intended directory it should be accessing.
javascript.express.security.audit.express-res-sendfile.express-res-sendfile : WARNING : /src/routes/keyServer.ts:14 — The application processes user-input, this is passed to res.sendFile which can allow an attacker to arbitrarily read files on the system through path traversal. It is recommended to perform input validation in addition to canonicalizing the path. This allows you to validate the path against the intended directory it should be accessing.
javascript.express.security.audit.express-res-sendfile.express-res-sendfile : WARNING : /src/routes/logfileServer.ts:14 — The application processes user-input, this is passed to res.sendFile which can allow an attacker to arbitrarily read files on the system through path traversal. It is recommended to perform input validation in addition to canonicalizing the path. This allows you to validate the path against the intended directory it should be accessing.
javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection : ERROR : /src/routes/login.ts:34 — Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.
javascript.express.security.audit.express-res-sendfile.express-res-sendfile : WARNING : /src/routes/quarantineServer.ts:14 — The application processes user-input, this is passed to res.sendFile which can allow an attacker to arbitrarily read files on the system through path traversal. It is recommended to perform input validation in addition to canonicalizing the path. This allows you to validate the path against the intended directory it should be accessing.
javascript.express.security.audit.possible-user-input-redirect.unknown-value-in-redirect : WARNING : /src/routes/redirect.ts:19 — It looks like 'toUrl' is read from user input and it is used to as a redirect. Ensure 'toUrl' is not externally controlled, otherwise this is an open redirect.
javascript.express.security.audit.express-open-redirect.express-open-redirect : WARNING : /src/routes/redirect.ts:19 — The application redirects to a URL specified by user-supplied input `query` that is not validated. This could redirect users to malicious locations. Consider using an allow-list approach to validate URLs, or warn users they are being redirected to a third-party website.
javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection : ERROR : /src/routes/search.ts:23 — Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.
javascript.lang.security.audit.code-string-concat.code-string-concat : ERROR : /src/routes/userProfile.ts:62 — Found data from an Express or Next web request flowing to `eval`. If this data is user-controllable this can lead to execution of arbitrary system commands in the context of your application process. Avoid `eval` whenever possible.
javascript.lang.security.audit.unknown-value-with-script-tag.unknown-value-with-script-tag : WARNING : /src/routes/videoHandler.ts:58 — Cannot determine what 'subs' is and it is used with a '<script>' tag. This could be susceptible to cross-site scripting (XSS). Ensure 'subs' is not externally controlled, or sanitize this data.
javascript.lang.security.audit.unknown-value-with-script-tag.unknown-value-with-script-tag : WARNING : /src/routes/videoHandler.ts:71 — Cannot determine what 'subs' is and it is used with a '<script>' tag. This could be susceptible to cross-site scripting (XSS). Ensure 'subs' is not externally controlled, or sanitize this data.
